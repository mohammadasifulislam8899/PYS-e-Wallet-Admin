// data/repository/KycManagementRepositoryImpl.kt
package com.droidnest.tech.pysadmin.data.repository

import android.util.Log
import com.droidnest.tech.pysadmin.domain.models.KycRequest
import com.droidnest.tech.pysadmin.domain.models.KycStatus
import com.droidnest.tech.pysadmin.domain.repository.KycManagementRepository
import com.droidnest.tech.pysadmin.utils.Resource
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.tasks.await
import java.text.SimpleDateFormat
import java.util.*
import javax.inject.Inject

class KycManagementRepositoryImpl @Inject constructor(
    private val firestore: FirebaseFirestore
) : KycManagementRepository {

    companion object {
        private const val TAG = "KycManagementRepository"
        private const val COLLECTION_KYC = "kyc_requests"
        private const val COLLECTION_USERS = "users"
    }

    override suspend fun getAllKycRequests(): Flow<Resource<List<KycRequest>>> = callbackFlow {
        Log.d(TAG, "üîÑ getAllKycRequests() ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")

        trySend(Resource.Loading())
        Log.d(TAG, "üì§ Loading state ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")

        val listener = firestore.collection(COLLECTION_KYC)
            .orderBy("submittedAt", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Error in getAllKycRequests: ${error.message}", error)
                    Log.e(TAG, "üîç Error code: ${error.localizedMessage}")
                    trySend(Resource.Error(error.message ?: "Failed to load KYC requests"))
                    return@addSnapshotListener
                }

                if (snapshot != null) {
                    Log.d(TAG, "‚úÖ Snapshot ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                    Log.d(TAG, "üìä Total documents: ${snapshot.size()}")

                    val requests = snapshot.documents.mapNotNull { doc ->
                        try {
                            val request = doc.toObject(KycRequest::class.java)?.copy(id = doc.id)
                            Log.d(TAG, "üìã Document ID: ${doc.id}")
                            Log.d(TAG, "üìù Request object: $request")
                            request
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ö†Ô∏è Failed to parse document ${doc.id}: ${e.message}", e)
                            null
                        }
                    }

                    Log.d(TAG, "‚ú® Total parsed requests: ${requests.size}")
                    trySend(Resource.Success(requests))
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Snapshot is null")
                    trySend(Resource.Success(emptyList()))
                }
            }

        Log.d(TAG, "üéß Snapshot listener added")

        awaitClose {
            Log.d(TAG, "üîå Snapshot listener removed (Flow closed)")
            listener.remove()
        }
    }

    override suspend fun getKycRequestById(requestId: String): Resource<KycRequest> {
        Log.d(TAG, "üîç getKycRequestById() ‡¶∂‡ßÅ‡¶∞‡ßÅ: ID = $requestId")

        return try {
            Log.d(TAG, "üì° Firebase ‡¶•‡ßá‡¶ï‡ßá data fetch ‡¶ï‡¶∞‡¶õ‡¶ø...")

            val snapshot = firestore.collection(COLLECTION_KYC)
                .document(requestId)
                .get()
                .await()

            Log.d(TAG, "‚úÖ Snapshot ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
            Log.d(TAG, "üìÑ Document exists: ${snapshot.exists()}")

            val kycRequest = snapshot.toObject(KycRequest::class.java)?.copy(id = snapshot.id) ?: run {
                Log.e(TAG, "‚ùå KYC request parse ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•")
                Log.w(TAG, "üìã Raw document data: ${snapshot.data}")
                return Resource.Error("KYC request not found")
            }

            Log.d(TAG, "‚ú® Request found: $kycRequest")
            Log.i(TAG, "‚úÖ getKycRequestById ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
            Resource.Success(kycRequest)

        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception in getKycRequestById: ${e.message}", e)
            Log.e(TAG, "üîç Exception type: ${e.javaClass.simpleName}")
            Log.e(TAG, "üìç Stack trace: ${e.stackTrace.joinToString("\n")}")
            Resource.Error(e.message ?: "Failed to load KYC request")
        }
    }

    override suspend fun getKycRequestsByStatus(status: KycStatus): Flow<Resource<List<KycRequest>>> = callbackFlow {
        Log.d(TAG, "üîÑ getKycRequestsByStatus() ‡¶∂‡ßÅ‡¶∞‡ßÅ: status = ${status.name}")

        trySend(Resource.Loading())
        Log.d(TAG, "üì§ Loading state ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")

        val listener = firestore.collection(COLLECTION_KYC)
            .whereEqualTo("status", status.name)
            .orderBy("submittedAt", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Error in getKycRequestsByStatus: ${error.message}", error)
                    Log.e(TAG, "üîç Filtering by status: ${status.name}")
                    trySend(Resource.Error(error.message ?: "Failed to load KYC requests"))
                    return@addSnapshotListener
                }

                if (snapshot != null) {
                    Log.d(TAG, "‚úÖ Snapshot ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                    Log.d(TAG, "üìä Total ${status.name} documents: ${snapshot.size()}")

                    val requests = snapshot.documents.mapNotNull { doc ->
                        try {
                            val request = doc.toObject(KycRequest::class.java)?.copy(id = doc.id)
                            Log.d(TAG, "üìã Document: ${doc.id} - Status: ${status.name}")
                            request
                        } catch (e: Exception) {
                            Log.e(TAG, "‚ö†Ô∏è Failed to parse ${status.name} document ${doc.id}: ${e.message}")
                            null
                        }
                    }

                    Log.d(TAG, "‚ú® Total parsed ${status.name} requests: ${requests.size}")
                    trySend(Resource.Success(requests))
                } else {
                    Log.w(TAG, "‚ö†Ô∏è Snapshot is null for status: ${status.name}")
                    trySend(Resource.Success(emptyList()))
                }
            }

        Log.d(TAG, "üéß Listener added for status: ${status.name}")

        awaitClose {
            Log.d(TAG, "üîå Listener removed for status: ${status.name}")
            listener.remove()
        }
    }

    override suspend fun approveKycRequest(
        requestId: String,
        adminId: String,
        adminNotes: String?
    ): Resource<String> {
        Log.d(TAG, "‚úÖ approveKycRequest() ‡¶∂‡ßÅ‡¶∞‡ßÅ")
        Log.d(TAG, "üìã Request ID: $requestId")
        Log.d(TAG, "üë§ Admin ID: $adminId")
        Log.d(TAG, "üìù Admin Notes: $adminNotes")

        return try {
            Log.d(TAG, "üì¶ Batch operation ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø...")
            val batch = firestore.batch()

            Log.d(TAG, "üîç KYC request ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...")

            val kycDoc = firestore.collection(COLLECTION_KYC)
                .document(requestId)
                .get()
                .await()

            Log.d(TAG, "‚úÖ Document ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá - exists: ${kycDoc.exists()}")

            val kycRequest = kycDoc.toObject(KycRequest::class.java) ?: run {
                Log.e(TAG, "‚ùå KYC request parse ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•")
                return Resource.Error("KYC request not found")
            }

            Log.d(TAG, "‚ú® Request object: $kycRequest")
            Log.d(TAG, "üë• User ID: ${kycRequest.userId}")

            val currentTime = SimpleDateFormat("dd MMM yyyy, hh:mm a", Locale.getDefault()).format(Date())
            Log.d(TAG, "‚è∞ Current Time: $currentTime")

            // Update KYC request status
            Log.d(TAG, "üîß Updating KYC request status to VERIFIED...")

            val kycRef = firestore.collection(COLLECTION_KYC).document(requestId)
            batch.update(
                kycRef,
                mapOf(
                    "status" to KycStatus.VERIFIED.name,
                    "reviewedAt" to currentTime,
                    "reviewedBy" to adminId,
                    "rejectionReason" to FieldValue.delete()
                )
            )
            Log.d(TAG, "‚úÖ KYC request batch update added")

            // Update user's KYC status
            Log.d(TAG, "üîß Updating user KYC status...")

            val userRef = firestore.collection(COLLECTION_USERS).document(kycRequest.userId)
            batch.update(
                userRef,
                mapOf(
                    "kycStatus" to KycStatus.VERIFIED.name,
                    "kycVerifiedAt" to currentTime,
                    "kycRequestId" to requestId,
                    "kycRejectionReason" to FieldValue.delete()
                )
            )
            Log.d(TAG, "‚úÖ User batch update added")

            Log.d(TAG, "üíæ Batch commit ‡¶ï‡¶∞‡¶õ‡¶ø...")
            batch.commit().await()

            Log.i(TAG, "üéâ KYC approval ‡¶∏‡¶´‡¶≤!")
            Log.i(TAG, "‚úÖ Request: $requestId approved by Admin: $adminId")

            Resource.Success("KYC request approved successfully")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception in approveKycRequest: ${e.message}", e)
            Log.e(TAG, "üîç Exception type: ${e.javaClass.simpleName}")
            Log.e(TAG, "üìç Full stack: ${e.stackTraceToString()}")
            Resource.Error(e.message ?: "Failed to approve KYC request")
        }
    }

    override suspend fun rejectKycRequest(
        requestId: String,
        adminId: String,
        rejectionReason: String
    ): Resource<String> {
        Log.d(TAG, "‚ùå rejectKycRequest() ‡¶∂‡ßÅ‡¶∞‡ßÅ")
        Log.d(TAG, "üìã Request ID: $requestId")
        Log.d(TAG, "üë§ Admin ID: $adminId")
        Log.d(TAG, "üìù Rejection Reason: $rejectionReason")

        return try {
            Log.d(TAG, "üì¶ Batch operation ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶õ‡¶ø...")
            val batch = firestore.batch()

            Log.d(TAG, "üîç KYC request ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...")

            val kycDoc = firestore.collection(COLLECTION_KYC)
                .document(requestId)
                .get()
                .await()

            Log.d(TAG, "‚úÖ Document ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá - exists: ${kycDoc.exists()}")

            val kycRequest = kycDoc.toObject(KycRequest::class.java) ?: run {
                Log.e(TAG, "‚ùå KYC request parse ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•")
                return Resource.Error("KYC request not found")
            }

            Log.d(TAG, "‚ú® Request object: $kycRequest")
            Log.d(TAG, "üë• User ID: ${kycRequest.userId}")

            val currentTime = SimpleDateFormat("dd MMM yyyy, hh:mm a", Locale.getDefault()).format(Date())
            Log.d(TAG, "‚è∞ Current Time: $currentTime")

            // Update KYC request status
            Log.d(TAG, "üîß Updating KYC request status to REJECTED...")

            val kycRef = firestore.collection(COLLECTION_KYC).document(requestId)
            batch.update(
                kycRef,
                mapOf(
                    "status" to KycStatus.REJECTED.name,
                    "reviewedAt" to currentTime,
                    "reviewedBy" to adminId,
                    "rejectionReason" to rejectionReason
                )
            )
            Log.d(TAG, "‚úÖ KYC request batch update added")

            // Update user's KYC status
            Log.d(TAG, "üîß Updating user KYC status...")

            val userRef = firestore.collection(COLLECTION_USERS).document(kycRequest.userId)
            batch.update(
                userRef,
                mapOf(
                    "kycStatus" to KycStatus.REJECTED.name,
                    "kycRejectionReason" to rejectionReason,
                    "kycRequestId" to requestId,
                    "kycVerifiedAt" to FieldValue.delete()
                )
            )
            Log.d(TAG, "‚úÖ User batch update added")

            Log.d(TAG, "üíæ Batch commit ‡¶ï‡¶∞‡¶õ‡¶ø...")
            batch.commit().await()

            Log.i(TAG, "üéâ KYC rejection ‡¶∏‡¶´‡¶≤!")
            Log.i(TAG, "‚ùå Request: $requestId rejected by Admin: $adminId")
            Log.i(TAG, "üìù Reason: $rejectionReason")

            Resource.Success("KYC request rejected")
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Exception in rejectKycRequest: ${e.message}", e)
            Log.e(TAG, "üîç Exception type: ${e.javaClass.simpleName}")
            Log.e(TAG, "üìç Full stack: ${e.stackTraceToString()}")
            Resource.Error(e.message ?: "Failed to reject KYC request")
        }
    }

    override suspend fun getPendingKycCount(): Flow<Resource<Int>> = callbackFlow {
        Log.d(TAG, "üîÑ getPendingKycCount() ‡¶∂‡ßÅ‡¶∞‡ßÅ")

        val listener = firestore.collection(COLLECTION_KYC)
            .whereEqualTo("status", KycStatus.PENDING.name)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e(TAG, "‚ùå Error in getPendingKycCount: ${error.message}", error)
                    trySend(Resource.Error(error.message ?: "Failed"))
                    return@addSnapshotListener
                }

                val count = snapshot?.size() ?: 0
                Log.d(TAG, "üìä Pending KYC count: $count")
                Log.d(TAG, "üìã Total documents in snapshot: ${snapshot?.size() ?: 0}")

                trySend(Resource.Success(count))
            }

        Log.d(TAG, "üéß Listener added for pending count")

        awaitClose {
            Log.d(TAG, "üîå Listener removed for pending count")
            listener.remove()
        }
    }
}